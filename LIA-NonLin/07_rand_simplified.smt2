(set-logic HORN)
(set-info :source |
Author: Frank Schuessele <schuessf@informatik.uni-freiburg.de>
Date: 2022-02-28
Generated from SV-COMP example pthread-ext/07_rand.c using Ultimate(using some simplification)
|)

(declare-fun Inv (Int Int Int Int Int Int Int Int Int Int) Bool)

(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_2 myrand_2 nexts_2 loc_thread_1 myrand_1 nexts_1))))
(assert (forall ((m Int) (seed Int) (state Int) (myrand_1 Int) (nexts_1 Int) (myrand_2 Int) (nexts_2 Int)) (Inv m seed state 0 (- 1) myrand_1 nexts_1 (- 1) myrand_2 nexts_2)))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (not (Inv m seed state loc_main_1 0 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (not (Inv m seed state loc_main_1 1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (state_1 Int)) (=> (Inv m seed state 0 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= 0 state_1) (Inv m seed state_1 1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (m_1 Int)) (=> (Inv m seed state 1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= m_1 0) (Inv m_1 seed state 2 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed state 2 (- 1) myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state 2 2 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed state 2 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> .cse0 .cse0))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed state 3 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state 4 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m_9 Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (m_8 Int)) (=> (Inv m_9 seed state loc_main_1 2 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (and (= m_8 1) (= m_9 0)) (Inv m_8 seed state loc_main_1 3 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state_2 Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed state_2 loc_main_1 3 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= 0 state_2) (Inv m seed state_2 loc_main_1 4 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state_4 Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed state_4 loc_main_1 3 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (not (= 0 state_4)) (Inv m seed state_4 loc_main_1 5 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (seed_1 Int)) (=> (Inv m seed state loc_main_1 4 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= seed_1 1) (Inv m seed_1 state loc_main_1 6 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed_4 Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed_4 state loc_main_1 5 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (and (not (= nexts_1 seed_4)) (not (= nexts_1 0))) (Inv m seed_4 state loc_main_1 7 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (state_3 Int)) (=> (Inv m seed state loc_main_1 6 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= state_3 1) (Inv m seed state_3 loc_main_1 8 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_2 Int) (loc_thread_2 Int) (myrand_2 Int) (seed_5 Int)) (=> (Inv m seed state loc_main_1 7 myrand_1 nexts_2 loc_thread_2 myrand_2 nexts_2) (= nexts_2 seed_5) (Inv m seed_5 state loc_main_1 9 myrand_1 nexts_2 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m_13 Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (m_12 Int)) (=> (Inv m_13 seed state loc_main_1 8 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (and (= m_12 0) (= m_13 1)) (Inv m_12 seed state loc_main_1 10 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m_17 Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (m_16 Int)) (=> (Inv m_17 seed state loc_main_1 9 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (and (= m_16 0) (= m_17 1)) (Inv m_16 seed state loc_main_1 11 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed_2 Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed_2 state loc_main_1 10 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= seed_2 0) (Inv m seed_2 state loc_main_1 0 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed_3 Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed_3 state loc_main_1 10 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> .cse0 (not (= seed_3 0)) .cse0))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_3 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (myrand_3 Int)) (=> (Inv m seed state loc_main_1 11 myrand_1 nexts_3 loc_thread_2 myrand_2 nexts_2) (= (mod nexts_3 10) myrand_3) (Inv m seed state loc_main_1 13 myrand_3 nexts_3 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed state loc_main_1 12 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 14 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (=> (Inv m seed state loc_main_1 13 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (not (<= myrand_1 10)) (Inv m seed state loc_main_1 1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (myrand_2 Int) (nexts_1 Int) (loc_thread_2 Int) (nexts_2 Int)) (=> (Inv m seed state loc_main_1 13 myrand_2 nexts_1 loc_thread_2 myrand_2 nexts_2) (<= myrand_2 10) (Inv m seed state loc_main_1 12 myrand_2 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m_9 Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (m_8 Int)) (=> (Inv m_9 seed state loc_main_1 2 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m_9 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 2 myrand_2 nexts_2) (Inv m_9 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (and (= m_8 1) (= m_9 0)) (Inv m_8 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state_2 Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed state_2 loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed state_2 loc_main_1 3 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state_2 loc_main_1 loc_thread_1 myrand_1 nexts_1 3 myrand_2 nexts_2) .cse0 (= 0 state_2) .cse0))))
(assert (forall ((m Int) (seed Int) (state_4 Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed state_4 loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed state_4 loc_main_1 3 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state_4 loc_main_1 loc_thread_1 myrand_1 nexts_1 3 myrand_2 nexts_2) .cse0 (not (= 0 state_4)) .cse0))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (seed_1 Int)) (=> (Inv m seed state loc_main_1 4 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 4 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= seed_1 1) (Inv m seed_1 state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed_4 Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed_4 state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed_4 state loc_main_1 5 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed_4 state loc_main_1 loc_thread_1 myrand_1 nexts_1 5 myrand_2 nexts_1) .cse0 (and (not (= nexts_1 seed_4)) (not (= nexts_1 0))) .cse0))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (state_3 Int)) (=> (Inv m seed state loc_main_1 6 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 6 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= state_3 1) (Inv m seed state_3 loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (seed_5 Int)) (=> (Inv m seed state loc_main_1 7 myrand_1 nexts_2 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 7 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (= nexts_2 seed_5) (Inv m seed_5 state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m_13 Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (m_12 Int)) (=> (Inv m_13 seed state loc_main_1 8 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m_13 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 8 myrand_2 nexts_2) (Inv m_13 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (and (= m_12 0) (= m_13 1)) (Inv m_12 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m_17 Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (m_16 Int)) (=> (Inv m_17 seed state loc_main_1 9 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m_17 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 9 myrand_2 nexts_2) (Inv m_17 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (and (= m_16 0) (= m_17 1)) (Inv m_16 seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))))
(assert (forall ((m Int) (seed_2 Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed_2 state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed_2 state loc_main_1 10 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed_2 state loc_main_1 loc_thread_1 myrand_1 nexts_1 10 myrand_2 nexts_2) .cse0 (= seed_2 0) .cse0))))
(assert (forall ((m Int) (seed_3 Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed_3 state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed_3 state loc_main_1 10 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed_3 state loc_main_1 loc_thread_1 myrand_1 nexts_1 10 myrand_2 nexts_2) .cse0 (not (= seed_3 0)) .cse0))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int) (nexts_3 Int) (myrand_3 Int)) (let ((.cse0 (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed state loc_main_1 11 myrand_1 nexts_3 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 11 myrand_2 nexts_3) .cse0 (= (mod nexts_3 10) myrand_3) .cse0))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed state loc_main_1 12 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 12 myrand_2 nexts_2) .cse0 .cse0))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed state loc_main_1 13 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 13 myrand_1 nexts_2) .cse0 (not (<= myrand_1 10)) .cse0))))
(assert (forall ((m Int) (seed Int) (state Int) (loc_main_1 Int) (loc_thread_1 Int) (myrand_1 Int) (nexts_1 Int) (loc_thread_2 Int) (myrand_2 Int) (nexts_2 Int)) (let ((.cse0 (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 loc_thread_2 myrand_2 nexts_2))) (=> (Inv m seed state loc_main_1 13 myrand_2 nexts_1 loc_thread_2 myrand_2 nexts_2) (Inv m seed state loc_main_1 loc_thread_1 myrand_1 nexts_1 13 myrand_2 nexts_2) .cse0 (<= myrand_2 10) .cse0))))

(check-sat)
